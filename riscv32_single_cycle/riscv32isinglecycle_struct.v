//
// Module riscv32_single_cycle_lib.riscv32iSingleCycle.struct
//
// Created:
//          by - ahmed.UNKNOWN (WES-HPOMEN)
//          at - 23:37:50 11/ 4/2023
//
// Generated by Mentor Graphics' HDL Designer(TM) 2023.1 Built on 19 Jan 2023 at 15:19:29
//

`resetall
`timescale 1ns/10ps 

`define     IR_rs1          19:15
`define     IR_rs2          24:20
`define     IR_rd           11:7
`define     IR_opcode       6:0
`define     IR_funct3       14:12 
`define     IR_funct7       31:25
`define     IR_shamt        24:20 

`define     OPCODE_Branch   5'b11_000
`define     OPCODE_Load     5'b00_000
`define     OPCODE_Store    5'b01_000 
`define     OPCODE_JALR     5'b11_001
`define     OPCODE_JAL      5'b11_011 
`define     OPCODE_Arith_I  5'b00_100 
`define     OPCODE_Arith_R  5'b01_100 
`define     OPCODE_AUIPC    5'b00_101 
`define     OPCODE_LUI      5'b01_101 

`define     OPCODE_SYSTEM   5'b11_100  
`define     OPCODE_Custom   5'b10_001 


`define     F3_ADD          3'b000 
`define     F3_SLL          3'b001 

`define     F3_SLT          3'b010 
`define     F3_SLTU         3'b011 
`define     F3_XOR          3'b100 
`define     F3_SRL          3'b101 
`define     F3_OR           3'b110 
`define     F3_AND          3'b111 

`define     BR_BEQ          3'b000 
`define     BR_BNE          3'b001 
`define     BR_BLT          3'b100
`define     BR_BGE          3'b101 
`define     BR_BLTU         3'b110 
`define     BR_BGEU         3'b111 

`define     OPCODE          IR[`IR_opcode] 

`define     ALU_ADD         4'b00_00 
`define     ALU_SUB         4'b00_01 
`define     ALU_PASS        4'b00_11
`define     ALU_OR          4'b01_00 
`define     ALU_AND         4'b01_01 
`define     ALU_XOR         4'b01_11 
`define     ALU_SRL         4'b10_00
`define     ALU_SRA         4'b10_10 
`define     ALU_SLL         4'b10_01 
`define     ALU_SLT         4'b11_01
`define     ALU_SLTU        4'b11_11
 
`define     SYS_EC_EB       3'b000
module riscv32iSingleCycle #(
   // synopsys template
   parameter N        = 32,        //architecture bit size
   parameter MEM_ADDR = 8,         //addressable memory size (currently 8 bits for [8x8x8x8]x32 addresses)
   parameter REG_ADDR = 5,         //addressable registers size (currently 5 bits for 32x32 addresses)
   parameter OPCODE   = 7,         //opcode size
   parameter RS1      = REG_ADDR,
   parameter RS2      = REG_ADDR,
   parameter RD       = REG_ADDR,
   parameter FUNCT3   = 3,
   parameter FUNCT7   = 7,
   parameter SHAMT    = 5
)
( 
   // Port Declarations
   input   wire      clk, 
   input   wire      rst
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [8-1:0]    CONST4;
wire  [32-1:0]   CONSTZ32;
wire  [8-1:0]    CONSTZ8;
wire  [32-1:0]   Instruction;
wire  [1:0]      alu_op;
wire             alu_src;
wire  [3:0]      alufn;
wire  [32 - 1:0] b;
wire             branch;
wire  [1:0]      branch_sel;
wire  [8-1:0]    branch_target;
wire             cf;
wire  [32 - 1:0] immediate;
wire             jump;
wire             load;
wire  [1:0]      mem_out_sel;
wire             mem_read;
wire             mem_write;
wire  [8-1:0]    pc_current_address;
wire  [8 - 1:0]  pc_next;
wire  [32 - 1:0] pc_plus_immediate;
wire  [8 - 1:0] pc_target_addr;
wire  [32- 1:0]  r;
wire  [32 - 1:0] read_data_out;
wire             reg_write;
wire  [32 - 1:0] rs1;
wire  [32 - 1:0] rs2;
wire             sf;
wire             vf;
wire  [32 - 1:0] write_data_reg_file;
wire             zf;


// Instances 
adder #(8) U_9( 
   .A_in    (CONST4), 
   .B_in    (pc_current_address), 
   .sum_out (pc_next)
); 

adder #(8) U_10( 
   .A_in    (immediate[8-1:0]), 
   .B_in    (pc_current_address), 
   .sum_out (branch_target)
); 

adder U_12( 
   .A_in    ({24'b0, pc_current_address}), 
   .B_in    (immediate), 
   .sum_out (pc_plus_immediate)
); 

alu alu_inst( 
   .cf          (cf), 
   .r           (r), 
   .rs1         (rs1), 
   .sf          (sf), 
   .vf          (vf), 
   .zf          (zf), 
   .b           (b), 
   .Instruction (Instruction[24:20]), 
   .alufn       (alufn)
); 

aluCu aluCu_inst( 
   .Instruction (Instruction), 
   .alu_op      (alu_op), 
   .alufn       (alufn)
); 

branchCu branchCu_inst( 
   .Instruction (Instruction[14:15-3]), 
   .branch      (branch), 
   .cf          (cf), 
   .jump        (jump), 
   .sf          (sf), 
   .vf          (vf), 
   .zf          (zf), 
   .branch_sel  (branch_sel)
); 

cu cu_inst( 
   .Instruction (Instruction[7-1:0]), 
   .alu_op      (alu_op), 
   .alu_src     (alu_src), 
   .branch      (branch), 
   .jump        (jump), 
   .mem_out_sel (mem_out_sel), 
   .mem_read    (mem_read), 
   .mem_write   (mem_write), 
   .reg_write   (reg_write)
); 

dataMem dataMem_inst( 
   .clk           (clk), 
   .mem_read      (mem_read), 
   .mem_write     (mem_write), 
   .r             (r), 
   .rs2           (rs2), 
   .rst           (rst), 
   .read_data_out (read_data_out)
); 

immGen immGen_inst( 
   .Instruction (Instruction), 
   .immediate   (immediate)
); 

instMem instMem_inst( 
   .Instruction        (Instruction), 
   .pc_current_address (pc_current_address >> 2)
); 

mux U_13( 
   .hi_in   (immediate), 
   .lo_in   (rs2), 
   .sel_in  (alu_src), 
   .sel_out (b)
); 

mux_4x1 U_15( 
   .A_00    (read_data_out), 
   .B_01    (r), 
   .C_10    (pc_plus_immediate), 
   .D_11    (CONSTZ32), 
   .sel     (mem_out_sel), 
   .sel_out (write_data_reg_file)
); 

mux_4x1 #(8) U_16( 
   .A_00    (pc_next), 
   .B_01    (branch_target), 
   .C_10    (pc_plus_immediate[8-1:0]), 
   .D_11    (CONSTZ8), 
   .sel     (branch_sel), 
   .sel_out (pc_target_addr)
); 

pc pc_inst( 
   .clk                (clk), 
   .load               (load), 
   .pc_current_address (pc_current_address), 
   .pc_target_addr     (pc_target_addr), 
   .rst                (rst)
); 

regFile regFile_inst( 
   .clk                 (clk), 
   .reg_write           (reg_write), 
   .rs1                 (rs1), 
   .rs2                 (rs2), 
   .rst                 (rst), 
   .write_data_reg_file (write_data_reg_file), 
   .Instruction         (Instruction)
); 


// ModuleWare code(v1.12) for instance 'FOUR' of 'constval'
assign CONST4 = 8'd4;

// ModuleWare code(v1.12) for instance 'VCC' of 'constval'
assign load = 1'd1;

// ModuleWare code(v1.12) for instance 'ZERO' of 'constval'
assign CONSTZ8 = 8'd0;

// ModuleWare code(v1.12) for instance 'ZERO1' of 'constval'
assign CONSTZ32 = 32'd0;

endmodule // riscv32iSingleCycle

